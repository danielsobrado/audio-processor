# Full Docker deployment
# Use this when you want everything running in Docker containers
# Usage: docker-compose -f docker-compose.full.yml up -d --build

services:
  db:
    image: postgres:15
    container_name: audio_postgres_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-audio_processor}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - audio_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - audio_processor_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: audio_redis_cache
    ports:
      - "6379:6379"
    volumes:
      - audio_redis_data:/data
    networks:
      - audio_processor_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5-community
    container_name: audio_neo4j_graph
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    volumes:
      - audio_neo4j_data:/data
    networks:
      - audio_processor_net
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null --spider --timeout 2 http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: production
    container_name: audio_processor_app
    env_file:
      - ../../.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - audio_processor_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3

  celery-worker:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: production
    container_name: celery_worker
    env_file:
      - ../../.env
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - audio_processor_net
    command: ["celery", "-A", "app.workers.celery_app", "worker", "-l", "info"]

networks:
  audio_processor_net:
    driver: bridge

volumes:
  audio_postgres_data:
  audio_redis_data:
  audio_neo4j_data:
