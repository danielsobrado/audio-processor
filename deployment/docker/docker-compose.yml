version: '3.8'

services:
  app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-audiouser}:${DB_PASSWORD:-secure_db_password}@postgres:5432/${DB_NAME:-audio_processor}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - KEYCLOAK_URL=${KEYCLOAK_URL:-http://keycloak:8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-audio-processor}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-audio-processor-api}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Only mount necessary directories, not entire source
      - ./logs:/app/logs
      - ./temp:/app/temp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - audio_processor_network

  postgres:
    image: postgres:16-alpine  # Latest stable version
    environment:
      - POSTGRES_USER=${DB_USER:-audiouser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_db_password}
      - POSTGRES_DB=${DB_NAME:-audio_processor}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-audiouser} -d ${DB_NAME:-audio_processor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Don't expose port in production - only internal access
    # ports:
    #   - "5432:5432"
    networks:
      - audio_processor_network

  redis:
    image: redis:7-alpine  # Latest stable version
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password} --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # Don't expose port in production - only internal access
    # ports:
    #   - "6379:6379"
    networks:
      - audio_processor_network

  worker:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    command: celery -A app.workers.celery_app worker -l info --concurrency=4
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-audiouser}:${DB_PASSWORD:-secure_db_password}@postgres:5432/${DB_NAME:-audio_processor}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/2
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Only mount necessary directories
      - ./logs:/app/logs
      - ./temp:/app/temp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "celery", "-A", "app.workers.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - audio_processor_network

  # Optional: Add nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    networks:
      - audio_processor_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  audio_processor_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
