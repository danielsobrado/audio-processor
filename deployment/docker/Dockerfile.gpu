# Multi-stage build for GPU-enabled audio processing
FROM nvidia/cuda:12.2-base-ubuntu22.04 as builder

# Install Python 3.12 and uv
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y --no-install-recommends \
    python3.12 \
    python3.12-venv \
    python3.12-dev \
    python3-pip \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast dependency management
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Install dependencies into /app/.venv using Python 3.12
RUN python3.12 -m venv /app/.venv && \
    /app/.venv/bin/pip install uv && \
    /app/.venv/bin/uv sync --frozen --no-install-project --no-dev

# Production stage with GPU support
FROM nvidia/cuda:12.2-runtime-ubuntu22.04

# Install system dependencies and Python 3.12
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y --no-install-recommends \
    # Python 3.12
    python3.12 \
    python3.12-venv \
    # Required for audio processing
    ffmpeg \
    # Required for health checks
    curl \
    # Required for GPU audio processing
    libnvidia-compute-520 \
    # Security updates
    && apt-get upgrade -y \
    # Clean up to reduce image size
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get autoclean

# Create symlink for python command
RUN ln -s /usr/bin/python3.12 /usr/bin/python

# Create non-root user with specific UID for security
RUN groupadd -r appuser --gid=1000 && \
    useradd -r -g appuser --uid=1000 --home=/app --shell=/bin/bash appuser

# Set working directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder --chown=appuser:appuser /app/.venv /app/.venv

# Copy application code
COPY --chown=appuser:appuser . .

# Ensure virtual environment is in PATH
ENV PATH="/app/.venv/bin:$PATH"

# Set CUDA environment variables for GPU access
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/temp && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Use exec form for proper signal handling
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
