[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "audio_processor"
version = "0.1.0"
description = "FastAPI-based audio processing service with transcription, diarization, and summarization"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Audio Processor Team"}
]
requires-python = ">=3.12,<3.13"
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "sqlalchemy",
    "alembic",
    "pydantic>=2.0",
    "pydantic-settings",
    "python-dotenv",
    "celery",
    "deepgram-sdk",
    "redis",
    "psycopg2-binary",
    "asyncpg",
    "python-multipart",
    "httpx",
    "PyJWT",
    "aiofiles",
    "aioredis",
    "neo4j>=5.15.0",
    "aiosqlite>=0.21.0",
    "email-validator>=2.2.0",
    "torch>=2.7.1",
    "whisperx>=3.4.2",
    "passlib>=1.7.4",
    "pytest-asyncio>=1.0.0",
    "transformers>=4.53.1",
    "pydub>=0.25.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "black",
    "isort",
    "flake8",
    "pyright",
]
test = [
    "pytest>=7.0",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "aiosqlite",
    "whisperx",
]

[project.urls]
Homepage = "https://github.com/your-org/audio-processor"
Repository = "https://github.com/your-org/audio-processor"
Issues = "https://github.com/your-org/audio-processor/issues"

[dependency-groups]
dev = [
    "autoflake>=2.3.1",
    "flake8-docstrings>=1.7.0",
    "mypy>=1.17.0",
    "pip-audit>=2.9.0",
    "pre-commit>=4.2.0",
    "pydocstyle>=6.3.0",
    "pyright>=1.1.402",
    "pytest-asyncio>=1.0.0",
    "ruff>=0.12.4",
    "safety>=3.5.2",
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_external: Tests that require external services",
    "requires_docker: Tests that require Docker services",
    "requires_gpu: Tests that require GPU",
    "requires_models: Tests that require ML models",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "basic"
reportMissingImports = false
reportMissingTypeStubs = false
reportPrivateUsage = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportMissingTypeArgument = false
exclude = [
    "**/migrations/**",
    "**/__pycache__/**",
    "**/node_modules/**",
    "**/.pytest_cache/**"
]
venvPath = "."
venv = ".venv"

[[tool.pyright.executionEnvironments]]
root = "."
pythonVersion = "3.12"
extraPaths = ["app"]

[tool.pydocstyle]
convention = "google"
add_ignore = "D100,D101,D102,D103,D104,D105,D106,D107" # Start with a relaxed config

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start with relaxed typing
ignore_missing_imports = true
exclude = [
    "migrations/",
    "__pycache__/",
    ".pytest_cache/",
    "tests/",
]

[tool.ruff]
line-length = 100  # Slightly more lenient than 88
target-version = "py312"

[tool.ruff.lint]
# Enable specific rule groups
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
]

# Ignore specific rules
ignore = [
    "E402",  # Module level import not at top of file (for scripts with dynamic imports)
    "E501",  # Line too long (handled by formatter)
    "F401",  # Imported but unused (can be useful for re-exports)
    "F841",  # Local variable assigned but never used (can be useful for debugging)
]

[tool.ruff.lint.per-file-ignores]
"scripts/*" = ["E", "F", "W"]     # Be very lenient with scripts
"tests/*" = ["F401", "F841"]      # Be more lenient with tests
"migrations/*" = ["E", "F", "W"]  # Be very lenient with migrations
