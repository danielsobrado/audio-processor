[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "audio-processor"
version = "0.1.0"
description = "FastAPI-based audio processing service with transcription, diarization, and summarization"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Audio Processor Team"}
]
requires-python = ">=3.12"
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "sqlalchemy",
    "alembic",
    "pydantic>=2.0",
    "pydantic-settings",
    "python-dotenv",
    "celery",
    "deepgram-sdk",
    "redis",
    "psycopg2-binary",
    "python-multipart",
    "httpx",
    "PyJWT",
    "aiofiles",
    "aioredis",
    "neo4j>=5.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "black",
    "isort",
    "flake8",
    "pyright",
]
test = [
    "pytest>=7.0",
    "pytest-asyncio", 
    "pytest-cov",
    "pytest-mock",
    "httpx",
    "aiosqlite",
    "whisperx",
]

[project.urls]
Homepage = "https://github.com/your-org/audio-processor"
Repository = "https://github.com/your-org/audio-processor"
Issues = "https://github.com/your-org/audio-processor/issues"

[dependency-groups]
dev = [
    "pyright>=1.1.402",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]
# asyncio_mode = "auto"  # Uncomment if pytest-asyncio is properly configured

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "basic"
reportMissingImports = false
reportMissingTypeStubs = false
reportPrivateUsage = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportMissingTypeArgument = false
exclude = [
    "**/migrations/**",
    "**/__pycache__/**",
    "**/node_modules/**",
    "**/.pytest_cache/**"
]
venvPath = "."
venv = ".venv"

[[tool.pyright.executionEnvironments]]
root = "."
pythonVersion = "3.12"
extraPaths = ["app"]
